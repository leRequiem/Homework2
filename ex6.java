//"\u001B[32m"
//class NArray{
//    public static void main(String[] args) {
//        int[][][] img = {
//                {   {250, 250, 250, 250},
//                        {150, 150, 150, 150},
//                        {100, 100, 100, 100},
//                        {50, 50, 50, 50}}, // R
//                {   {250, 250, 250, 250},
//                        {150, 150, 150, 150},
//                        {100, 100, 100, 100},
//                        {50, 50, 50, 50}}, // G
//                {   {250, 250, 250, 250},
//                        {150, 150, 150, 150},
//                        {100, 100, 100, 100},
//                        {50, 50, 50, 50}}, // B
//        };
//    }
//}
//
//
//import java.util.Scanner;
//class ex10 {
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        System.out.println("Введите количество элементов в массиве: ");
//        int num = in.nextInt();
//        String[] array = new String[num+1];
//
//        System.out.println("Введите строки самого массива: ");
//        for (int i = 0; i <= num; i++) {
//            array[i] = in.nextLine();
//        }
//
//        System.out.println("Введите искомую подстроку: ");
//        String substring = in.nextLine();
//
//        for (int x = 0; x < array.length; x++) {
//            if (array[x].contains(substring)) {
//                System.out.println(x);
//            }
//        }
//    }
//}
//
//
//class matrix{
//    public static void main(String[] args) {
//        int [][] matrix = { {-1, -3, 0, 3, 1},
//                {2, 0, 2, 1, 1},
//                {3, 0, 1, 4, -2},
//                {4, -2, -3, 0, 1},
//                {-1, 5, 0, 1, 0}  };
//
//        int [][] mask = { {-2, -1}, {-1, 3} };
//
//        int [][] b = new int[4][4];
//
//        for (int i = 0; i < 4; i++){
//            for (int j = 0; j < 4; j++){
//                b[i][j] = 0;
//
//                for (int k = 0; k < 2; k++){
//                    for (int n = 0; n < 2; n++){
//                        b[i][j] += matrix[i+k][j+n] * mask[k][n];
//                    }
//                }
//            }
//        }
//
//        for (int i = 0; i<4; i++) {
//            for (int j = 0; j<4; j++) {
//                System.out.print(b[i][j] + ", ");
//            }
//            System.out.println();
//        }
//    }
//}


//class penguin {
//    public static void main(String[] args) {
//        int[][] image = {
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfeffff, 0xec5456, 0xf3232e, 0xf4232e, 0xf8737e, 0xfeffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdf5f4, 0xf47577, 0xee2d33, 0xf02833, 0xf52835, 0xeb2d35, 0xf87077, 0xfefafe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfecccf, 0xd6222e, 0xe4262d, 0xea2932, 0x791717, 0xf62835, 0xf02832, 0xfeefef, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf02636, 0xec2b35, 0xe52330, 0xcc282d, 0x53220d, 0xe92932, 0xf32934, 0xf0757c, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xed7374, 0xd92731, 0xd1212b, 0xe12630, 0xde262d, 0xa1222c, 0xe6242f, 0xd9272c, 0xf14850, 0xfbabb0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xef7f77, 0xde3536, 0xd6252c, 0xd0212d, 0xe4252d, 0xf12832, 0xd6222d, 0xd32229, 0xf72834, 0xf52834, 0xf0313a, 0xf8b4b5, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfefd, 0xf3333a, 0xcb2330, 0xcf222c, 0xcf222c, 0xe32330, 0xef2834, 0xd9222b, 0xd72129, 0xf12835, 0xeb2b31, 0xfd2637, 0xf6525d, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xdb2431, 0xd2202c, 0xd12431, 0xd2212f, 0xcf222c, 0xd4202c, 0xd2212c, 0xef2c37, 0xd32028, 0x691212, 0xf52936, 0xf24c55, 0xfffefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfeadb0, 0xe32b2d, 0xc51e28, 0xce232d, 0xb0232c, 0x4e120f, 0xdb212d, 0xe32631, 0xd4222d, 0xd3212b, 0xe92532, 0x4f2617, 0x58150f, 0xf62833, 0xf76066, 0xffeced, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc9262a, 0x94171a, 0xcd232d, 0xd5202f, 0xd5202a, 0xda1e2e, 0xcd232b, 0xd1212b, 0xd3222d, 0xd3212c, 0xf52936, 0xe43035, 0xdc202c, 0xf62935, 0xf02b34, 0xfccfcf, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf9d2d1, 0xce242d, 0xc31f2a, 0xad1e22, 0xcb242d, 0xa61d1f, 0xd0222c, 0xda2732, 0xd1232f, 0xd0222c, 0xd0222d, 0xda212c, 0xda202c, 0xea2a33, 0xe0262f, 0xf52934, 0xf45962, 0xfee1e3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf8243a, 0x8c1c1e, 0xd12030, 0xb61e2a, 0xd12030, 0x981e1c, 0x91181b, 0xcd232c, 0xca252f, 0x651510, 0xd1222e, 0xce222d, 0xd31f2c, 0xd1222d, 0xe4222b, 0xcb242c, 0xf52835, 0xf77a83, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfde7e9, 0xef4b4e, 0xc61825, 0xba2026, 0xa81c24, 0x6f1517, 0xbb1e27, 0xd0212d, 0xb62125, 0xc62029, 0xc9252d, 0x461f11, 0xd6242e, 0xd0222d, 0xe72530, 0xd0232e, 0xe2242f, 0x541711, 0xc6242a, 0xee2c34, 0xf98c92, 0xfffcfd, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf1babb, 0xab1f24, 0xc31f28, 0xc12028, 0xa01a28, 0x481312, 0xc31f27, 0xa61f22, 0xc31e28, 0xca202b, 0xce222f, 0xa72027, 0xcd2630, 0xd2222d, 0xcb1f2b, 0xa11d1f, 0xd92431, 0x2d1c17, 0xb11c23, 0xf42935, 0xee4e50, 0xfdf9fa, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xc5ec7d, 0xc25e41, 0x901a1a, 0x8e1a1c, 0xd2212f, 0xb81e29, 0x8d1a1d, 0xc61e2d, 0xcb232e, 0xad1f23, 0xc5232b, 0x971b1e, 0x8d1d1a, 0xd51f2d, 0xc7262e, 0xcc232e, 0xd51f30, 0xd32030, 0xc9252e, 0xa4110c, 0xc8eb7f, 0xbef07c, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x5f881f, 0x29a863, 0xceed7b, 0x901c1a, 0xd52032, 0xb81e2b, 0x8b1a1b, 0xb41e27, 0xcd252b, 0xa61f2a, 0xd2212f, 0x921e1c, 0x981819, 0xcc242b, 0x670d1b, 0xd1222f, 0xcd2430, 0xcd232e, 0xc6aa69, 0xcbea81, 0x37a253, 0x5e8721, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x384d17, 0x54791c, 0x37aa6c, 0xc82c2d, 0x8d1b1b, 0xa61d23, 0xd1212e, 0x2c1a1e, 0x560d1a, 0xb51c21, 0xc9212a, 0xd3202d, 0xd2202e, 0xd2202e, 0x5d2a0d, 0x572c0a, 0xb71d26, 0xc7272d, 0xb1a45f, 0x21b66d, 0x45781c, 0x3b4e1a, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb2c6bc, 0x134c28, 0x426716, 0x62dc7c, 0xcc9e5f, 0xa84e37, 0xb12225, 0x681d1e, 0x7d1417, 0xb11c25, 0xb61f26, 0xaa1c26, 0xa91b24, 0xba1e27, 0x872322, 0x7a1916, 0xba553d, 0x6ada82, 0x51b054, 0x486518, 0x104d27, 0xf5f7f7, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x4b755f, 0x84c2b, 0x608621, 0x2cd37b, 0x86e77a, 0xbdf27c, 0xbcc371, 0xd2212d, 0xb21c26, 0x9c161f, 0xc9202e, 0xd11f2f, 0x95151b, 0xc4d574, 0xbff17c, 0x7be97b, 0x30af6b, 0x456117, 0x84a2c, 0x688e7c, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x4d7965, 0x274f1b, 0x57781d, 0x3f9744, 0x33aa5b, 0x4ec66b, 0x9edb7e, 0x9be180, 0x9be781, 0x9fe480, 0x9edb7d, 0x97df7d, 0x41c46e, 0x32aa5c, 0x499341, 0x537a1f, 0x124c28, 0x4e7565, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa4a2e, 0x84a2f, 0x254d1f, 0x374f19, 0x3c5a1e, 0x5f891e, 0x5f891f, 0x5f891e, 0x5f891e, 0x5f891e, 0x5d8a1e, 0x3b5519, 0x374f19, 0x224d20, 0x84a2f, 0xa4b9af, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffeff, 0xffffff, 0xb7c8c0, 0x8aa89b, 0xc4c28, 0x1c4e1f, 0x1c4d20, 0x1c4d20, 0x1c4d20, 0x1c4d20, 0x1d4d20, 0x84d2a, 0x8ba79b, 0xb8ccc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xecf0ef, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
//                        { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff }
//                };
//
//        String RESET = "\u001B[0m";
//        String R = "\u2588";
//
//        for (int i = 0; i < image.length; i++) {
//            for (int j = 0; j < image[i].length; j++) {
//                var r = image[i][j] / 256 / 256;
//                var g = (image[i][j] / 256) % 256;
//                var b = image[i][j] % 256;
//
//                System.out.printf("\u001B[38;2;%d;%d;%dm", r, g, b);
//                System.out.print(R);
//                System.out.print(RESET);
//            }
//            System.out.println();
//        }
//    }
//}


//import java.util.Scanner;
//import java.util.Arrays;
//class Example {
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        int num = in.nextInt();
//        int[] array = new int[num];
//
//        for (int i = 0; i < num; i++){
//            array[i] = in.nextInt();
//        }
//
//        System.out.println("Введите K: ");
//        int k = in.nextInt();
//        Arrays.sort(array);
//        int[] reversed_array = new int[num];
//
//        for (int i = 0; i < array.length; i++) {
//            reversed_array[i] = array[num-i];
//        }
//        System.out.println(reversed_array[k]);
//    }
//}

import java.util.Scanner;
class ex6 {
    private static double[] calculation(double a, double b, double c) {
        double discriminant = b * b - 4 * a * c;
        if (a == 0) {
            return new double[] {-c / b};
        }
        if (discriminant == 0) {
            return new double[] {-b / 2 / a};
        }
        if (discriminant > 0) {
            var result = new double[] {(-b+Math.sqrt(discriminant))/(2*a), (-b-Math.sqrt(discriminant))/(2*a)};
            return result;
        }
        return new double[] {};
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int a = in.nextInt();
        int b = in.nextInt();
        int c = in.nextInt();
        var solutions = calculation(a, b, c);
        String equation;

        if (b>0 && c>0){
            equation = a + "x^2 + " + b + "x + " + c + " = 0";
        }
        else if (b>0 && c<0){
            equation = a + "x^2 + " + b + "x " +  c + " = 0";
        }
        else if (b<0 && c>0){
            equation = a + "x^2 " + b + "x + " + c + " = 0";
        }
        else {
            equation = a + "x^2 " + b + "x " + c + " = 0";
        }

        System.out.println("Уравнение: ");
        System.out.print(equation);
        System.out.println();
        if (solutions.length == 0){
            System.out.println("Корней уравнения не существует");
        }
        else {
            System.out.println("Корни уравнения:");
            for (int i = 0; i < solutions.length; i++){
                System.out.println(solutions[i]);
            }
        }
    }
}